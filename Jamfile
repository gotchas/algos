# Echo [ SHELL "./write_version.sh" ] ; # runs the script from Jamfile dir /not Jamroot dir/
# ^ in Jamroot /must be run before loading of this file/

import notfile ;
import testing ;

path-constant MYPROJECT_ROOT : . ;
path-constant TOP : . ;

# required for coveralls
variant coverage : <cxxflags>--coverage <linkflags>--coverage ;

import boost ;
boost.use-project ;

project
        : usage-requirements
                <implicit-dependency>/boost//headers
                <include>.
        : requirements
                <implicit-dependency>/boost//headers  # <= THIS _ALWAYS_ REBUILDS TARGETS even if up to date
                <library>/boost//unit_test_framework
                <include>.

                <host-os>linux:<cxxflags>"-std=c++1z "
                <host-os>darwin:<cxxflags>"-std=c++1y "

                <toolset>clang-5.0:<cxxflags>"-ferror-limit=100 "
                <toolset>msvc:<cxxflags>"/std:c++14 "
        :
         #source-location src
;

if $(UNIX)
{
   Echo [ SHELL "date +'%D %T'" ] ;
}

run src/dummy.cpp ;
test-suite  moja-swita
    :
    [ unit-test lower_bound_test : test/lower_bound_test.cpp ]
    [ unit-test test_dispatcher : test/test_dispatcher.cpp ]
;
unit-test topo_sort_test : test/topo_sort_test.cpp ;

install install-app : topo_sort_test : <location>install_dir ;

notfile . : @unconditional-post-install : install-app ;
actions unconditional-post-install
{
    echo Unconditional post install run. Install is now done.
    echo "$(<) $(>) "
}

make file.out : test_dispatcher : @in2out ;
actions in2out
{
    echo in2out $(<) $(>)
    touch $(<)
}

notfile unconditional_action : @unconditional_action ;
actions unconditional_action
{
    echo "running unconditional_action, warning! might be bash shell SH or winowz cmd line BAT"
    touch "run_unconditional_action"
}

import property-set ;
notfile print_toolset : @print_toolset_version ;
rule print_toolset_version ( t : : properties * )
{
    local ps = [ property-set.create $(properties) ] ;
    local toolset = [ $(ps).get <toolset> ] ;
    echo Toolset is $(toolset) ;
    local version = [ $(ps).get <toolset-$(toolset):version> ] ;
    echo Toolset version is $(version) ;
}

